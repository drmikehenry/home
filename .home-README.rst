************
Introduction
************

This is a collection of configuration files stored in a Git repository with a
detached work-tree.  This avoids issues caused by having ``$HOME`` be a normal
work tree:

- With a normal work-tree, all subdirectories below ``$HOME`` are by default
  part of the home repository.  This makes it too easy to accidentally commit
  files to the wrong repository.  It also causes tools that scan backward for a
  ``.git/`` directory to erroneously infer a top-level working-copy directory
  for subdirectories of ``$HOME`` that aren't supposed to be source controlled
  at all.

- There can be only one normal work-tree, making it hard to source control
  portions of ``$HOME`` in separate repositories.

Directory layout
================

The files and repositories lay out as follows::

  $HOME/
    .home.git/        # The primary bare Git repository with work-tree=$HOME
    .home-README.txt  # This README
    .home2.git/       # A second bare Git repository with work-tree=$HOME
    .home2-README.txt # A README for the second repository
    .profile          # A source-controlled file
    .profile2         # A source-controlled file (stored in .home2.git)

Because two separate repositories are responsible for content, a single
``~/.gitconfig`` file isn't sufficient to properly ignore files housed in the
other repository.  To deal with that, the script ``~/bin/homegitupdate``
enumerates the files in each repository and writes the corresponding list of
filenames to the other repository's ``info/exclude`` file.  In addition, the
contents of ``~/.gitignore2`` are appended to these ``info/exclude`` files.

homegit and home2git
====================

Two Bash aliases are defined (in ``~/.bashrc``) to manipulate these repositories
with detached work-trees::

  alias homegit='GIT_DIR=~/.home.git GIT_WORK_TREE=~  git'
  alias home2git='GIT_DIR=~/.home2.git GIT_WORK_TREE=~  git'

These aliases set some environment variables telling Git where to find the
repository and the work-tree, then they invoke ``git``.  Environment variables
are used instead of switches (e.g., ``--work-tree ~``) so that custom Git
commands will work correctly (since the variables will be inherited, unlike
command-line arguments).

Simple usage
============

To update ``~/.profile``, make edits to that file and then commit via
``homegit``, e.g.::

  homegit add ~/.profile
  homegit commit -m 'Update .profile.'

To update ``~/.profile2``, make edits to that file and then commit via
``home2git``, e.g.::

  home2git add ~/.profile2
  home2git commit -m 'Update .profile2.'
